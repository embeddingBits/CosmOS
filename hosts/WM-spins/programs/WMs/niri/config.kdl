// -*- js-json -*-
// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// Input device configuration.
// Find the full list of options on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
    keyboard {
        xkb {
            // You can set rules, model, layout, variant and options.
            // For more information, see xkeyboard-config(7).

            // For example:
            // layout "us,ru"
            // options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
	        options "compose:ralt"
        }
        numlock
    }

    // Next sections include libinput settings.
    // Omitting settings disables them, or leaves them at their default values.
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag-lock
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        middle-emulation
    }

    // Uncomment this to make the mouse warp to the center of newly focused windows.
    // warp-mouse-to-focus

    // Focus windows and outputs automatically when moving the mouse into them.
    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    focus-follows-mouse max-scroll-amount="90%"
    mod-key "Super"
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
/-output "eDP-1" {
    // Uncomment this line to disable this output.
    // off

    // Resolution and, optionally, refresh rate of the output.
    // The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    // If the refresh rate is omitted, niri will pick the highest refresh rate
    // for the resolution.
    // If the mode is omitted altogether or is invalid, niri will pick one automatically.
    // Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
    mode "1920x1080@120.030"

    // You can use integer or fractional scale, for example use 1.5 for 150% scale.
    scale 2

    // Transform allows to rotate the output counter-clockwise, valid values are:
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Position of the output in the global coordinate space.
    // This affects directional monitor actions like "focus-monitor-left", and cursor movement.
    // The cursor can only move between directly adjacent outputs.
    // Output scale and rotation has to be taken into account for positioning:
    // outputs are sized in logical, or scaled, pixels.
    // For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
    // so to put another output directly adjacent to it on the right, set its x to 1920.
    // If the position is unset or results in an overlap, the output is instead placed
    // automatically.
    position x=1280 y=0
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {

    // Set workspace background color.
    // background-color "transparent"
    // Set gaps around windows in logical pixels.
    gaps 10

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.
    center-focused-column "never"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        // Proportion sets the width as a fraction of the output width, taking gaps into account.
        // For example, you can perfectly fit four windows sized "proportion 0.25" on an output.
        // The default preset widths are 1/3, 1/2 and 2/3 of the output.
        // proportion 0.33333
        proportion 0.5
        // proportion 0.66667

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
    // preset-window-heights { }

    // You can change the default width of the new windows.
    // default-column-width { proportion 0.5; }
    // If you leave the brackets empty, the windows themselves will decide their initial width.
    default-column-width { }

    // By default focus ring and border are rendered as a solid background rectangle
    // behind windows. That is, they will show up through semitransparent windows.
    // This is because windows using client-side decorations can have an arbitrary shape.
    //
    // If you don't like that, you should uncomment `prefer-no-csd` below.
    // Niri will draw focus ring and border *around* windows that agree to omit their
    // client-side decorations.
    //
    // Alternatively, you can override it with a window rule called
    // `draw-border-with-background`.

    // You can change how the focus ring looks.
    focus-ring {
        // Uncomment this line to disable the focus ring.
        off

        // How many logical pixels the ring extends out from the windows.
        width 4

        // Colors can be set in a variety of ways:
        // - CSS named colors: "red"
        // - RGB hex: "#rgb", "#rgba", "#rrggbb", "#rrggbbaa"
        // - CSS-like notation: "rgb(255, 127, 0)", rgba(), hsl() and a few others.

        // Color of the ring on the active monitor.
        // active-color "#61afef"

        // Color of the ring on inactive monitors.
        // inactive-color "#595959aa"

        // You can also use gradients. They take precedence over solid colors.
        // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
        // The angle is the same as in linear-gradient, and is optional,
        // defaulting to 180 (top-to-bottom gradient).
        // You can use any CSS linear-gradient tool on the web to set these up.
        // Changing the color space is also supported, check the wiki for more info.
        //
        active-gradient from="#5c64f1" to="#63a7fa" angle=45

        // You can also color the gradient relative to the entire view
        // of the workspace, rather than relative to just the window itself.
        // To do that, set relative-to="workspace-view".
        //
        inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.
        // off

        width 3
        // active-color "#ffc87f"
        // inactive-color "#505050"

        active-gradient from="#5c64f1" to="#63a7fa" angle=45
        // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        // on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        // 
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        // 
        // draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        softness 30

        // Spread expands the shadow.
        spread 5

        // Offset moves the shadow relative to the window.
        offset x=0 y=5

        // You can also change the shadow color and opacity.
        color "#0007"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}


environment {
    // GDK_BACKEND "wayland"
    QT_QPA_PLATFORM "wayland"
    QT_QPA_PLATFORMTHEME "qt5ct"
    XDG_CURRENT_DESKTOP "Niri"
    XDG_SESSION_TYPE "wayland"
    XDG_SESSION_DESKTOP "Niri"
    
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.
// spawn-at-startup "alacritty" "-e" "fish"
spawn-at-startup "~/.nixos/hosts/Krypton/programs/rice/scripts/fixPortalsNiri"
spawn-at-startup "xwayland-satellite"
spawn-at-startup "hypridle"
spawn-at-startup "dbus-update-activation-environment --systemd --all"
spawn-at-startup "waybar"
// spawn-at-startup "nm-applet --indicator --no-agent --no-daemon"
spawn-at-startup "blueman-applet"
spawn-at-startup "blueman-tray"
spawn-at-startup "swayosd-server"
spawn-at-startup "gpg-agent --daemon"
// spawn-at-startup "emacs --daemon"
spawn-at-startup "eww -c ../../eww/dashboard/ daemon"
spawn-at-startup "eww -c ../../eww/bar/ daemon"
spawn-at-startup "hyprpaper"
spawn-at-startup "~/.nixos/hosts/Krypton/programs/rice/scripts/eww-open-fancy"
// spawn-at-startup "mako" 
spawn-at-startup "swaync" 
spawn-at-startup "wl-paste --primary --type text --watch cliphist store"
spawn-at-startup "wl-paste --primary --type image --watch cliphist store"
spawn-at-startup "wl-paste --type text --watch cliphist store"
spawn-at-startup "wl-paste --type image --watch cliphist store"


// Make the wallpaper stationary, rather than moving with workspaces.
/*
layer-rule {
    // Find the right namespace by running niri msg layers.
    match namespace="^hyprpaper$"
    place-within-backdrop false
}
*/

// Optionally, disable the workspace shadows in the overview.
overview {
	zoom 0.55
}


// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // Uncomment to turn off all animations.
    // off

    // Slow down all animations by this factor. Values below 1 speed them up instead.
    slowdown 0.8
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// Open the Firefox picture-in-picture player as floating by default.
window-rule {
    // This app-id regular expression will work for both:
    // - host Firefox (app-id is "firefox")
    // - Flatpak Firefox (app-id is "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

window-rule {
	match app-id=r#"^emacs"# title="^emacs-prompt$"
	open-floating true
}
// Open Emacs client in full screen
window-rule {
	match app-id=r#"^emacs"#
	open-maximized true
}

// Fix quirk with Zen browser
window-rule {
	match app-id=r#"^\"\$\{MOZ_APP_LAUNCHER:-zen-beta\}\""#
	open-maximized true
}


window-rule {
	match app-id=r#"^\"\$\{MOZ_APP_LAUNCHER:-zen-beta\}\""# title="^Library$"
	open-floating true
	open-maximized false
	open-fullscreen false
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
window-rule {
    geometry-corner-radius 7
    clip-to-geometry true
}

hotkey-overlay {
	skip-at-startup
}


binds {
    Mod+Grave cooldown-ms=500 { spawn "kitten" "quick-access-terminal"; }
    Print { spawn "screenshotty"; }
    Mod+Q { close-window; }
    Super+Shift+Q { quit; }
    Mod+Shift+Slash { show-hotkey-overlay; }
    Mod+Tab { toggle-overview; }
    Mod+O { toggle-overview; }
    Mod+Shift+Return { spawn "~/.nixos/hosts/Krypton/programs/rice/scripts/kitty-dropterm"; }
    Mod+Return { spawn "kitty"; }
    Mod+KP_Enter { spawn "kitty" "-e" "zsh"; }
    Mod+Shift+B { spawn "brave"; }
    Mod+Ctrl+B { spawn "brave --tor --profile-directory='Incognito'"; }
    Mod+Ctrl+Shift+B { spawn "brave --guest"; }
    Mod+B { spawn "zen"; }
    Mod+T { spawn "pypr toggle term"; }
    Mod+A { spawn "swaync-client" "-t"; }
    Mod+N { spawn "erun" "wifi"; }
    Mod+Shift+W { spawn "restart-eww"; }
    Mod+W { spawn "eww-open-fancy"; }
    Mod+S { spawn "screenshotty"; }
    Mod+C { spawn "niri" "msg" "pick-color"; }
    // Mod+A { spawn "ags -t quicksettings"; }
    // Mod+N { spawn "ags -t notificationsmenu && sleep 1.5 && ags -t notificationsmenu"; }
    Mod+X { spawn "eww-powermenu"; }
    // Mod+M { spawn "ags -t mediamenu && sleep 2 && ags -t mediamenu"; }
    Mod+E { spawn "nautilus"; }
    Mod+Z { spawn "emc"; }
    Mod+L { spawn "hyprlock"; }
    // Mod+C { center-column; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    // Mod+Shift+F { toggle-floating; }
    Mod+V { spawn "nwg-clipman"; }
    Mod+Ctrl+Shift+T { spawn "tor-browser"; }
    // Mod+Escape { kill; }
    Mod+Space { spawn "albert" "toggle"; }
    Mod+D { spawn "erun" "drun"; }
    Mod+Shift+E { spawn "erun" "unicode"; }
    Mod+R { spawn "erun" "run"; }
    Mod+Shift+A { spawn "erun" "bookmarks"; }

    // Move focus with Mod + arrow keys
    Mod+Left { focus-column-left; }
    Mod+Right { focus-column-right; }
    // Mod+Up { focus-column-up; }
    // Mod+Down { focus-column-down; }

    // Move window with Mod + Shift + arrow keys
    Mod+Shift+Left { move-column-left; }
    Mod+Shift+Right { move-column-right; }
    // Mod+Shift+Up { move-up; }
    // Mod+Shift+Down { move-down; }

    // Switch workspaces with Mod + [0-9]
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+0 { focus-workspace 10; }

    // Move active window to a workspace with Mod + Shift + [0-9]
    Mod+Shift+1 { move-column-to-workspace 1; }
    Mod+Shift+2 { move-column-to-workspace 2; }
    Mod+Shift+3 { move-column-to-workspace 3; }
    Mod+Shift+4 { move-column-to-workspace 4; }
    Mod+Shift+5 { move-column-to-workspace 5; }
    Mod+Shift+6 { move-column-to-workspace 6; }
    Mod+Shift+7 { move-column-to-workspace 7; }
    Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace 9; }
    Mod+Shift+0 { move-column-to-workspace 10; }

/*
    // Move active window silently to a workspace with Mod + Ctrl + [0-9]
    Mod+Ctrl+1 { move-to-workspace-silent 1; }
    Mod+Ctrl+2 { move-to-workspace-silent 2; }
    Mod+Ctrl+3 { move-to-workspace-silent 3; }
    Mod+Ctrl+4 { move-to-workspace-silent 4; }
    Mod+Ctrl+5 { move-to-workspace-silent 5; }
    Mod+Ctrl+6 { move-to-workspace-silent 6; }
    Mod+Ctrl+7 { move-to-workspace-silent 7; }
    Mod+Ctrl+8 { move-to-workspace-silent 8; }
    Mod+Ctrl+9 { move-to-workspace-silent 9; }
    Mod+Ctrl+0 { move-to-workspace-silent 10; }
*/
    // Scroll through existing workspaces with Mod + scroll
    // Mod+ScrollUp { switch-to-workspace-next; }
    // Mod+ScrollDown { switch-to-workspace-prev; }

/*
    // Move/resize windows with Mod + mouse
    Mod+Button1 { move-window; }
    Mod+Shift+Button1 { resize-window; }
    Alt+Button1 { resize-window; }
    Mod+Button3 { resize-window; }
*/

    // Multimedia keys
    XF86AudioRaiseVolume { spawn "~/.nixos/hosts/Krypton/programs/rice/scripts/vol --up"; }
    XF86AudioLowerVolume { spawn "~/.nixos/hosts/Krypton/programs/rice/scripts/vol --down"; }
    XF86MonBrightnessUp { spawn "~/.nixos/hosts/Krypton/programs/rice/scripts/bri --up"; }
    XF86MonBrightnessDown { spawn "~/.nixos/hosts/Krypton/programs/rice/scripts/bri --down"; }
    XF86Search { spawn "~/.nixos/hosts/Krypton/programs/rice/scripts/launchpad"; }
    XF86AudioMute { spawn "swayosd-client --output-volume mute-toggle"; }
    XF86AudioPlay { spawn "playerctl play-pause"; }
    XF86AudioNext { spawn "playerctl next"; }
    XF86AudioPrev { spawn "playerctl previous"; }

    // Misc bindings
    Ctrl+Escape { spawn "kitty -e ~/.nixos/hosts/Krypton/programs/rice/scripts/btop"; }
    Caps_Lock { spawn "swayosd-client --caps_lock"; }
}

// Switch events
switch-events {
    lid-close { spawn "~/.nixos/hosts/Krypton/programs/rice/scripts/lidclose"; }
    lid-open { spawn "~/.nixos/hosts/Krypton/programs/rice/scripts/lidclose"; }

}
