;; -*-emacs-lisp-*-
;; vim:ft=lisp

;; Variable declarations
(defpoll day :interval "2h" "date+%a")
(defpoll month :interval "12h" "date+%b")
(defpoll date :interval "2h" "date+%d")
(defpoll microphone_poll :initial "{}" :interval "999h" "./modules/microphone.sh")
(defpoll speaker_poll :initial "{}" :interval "999h" "./modules/speaker.sh")

(defpoll currentVolume :interval "100ms" "wpctl get-volume @DEFAULT_SINK@ | awk '{print $2}' | sed 's/0.//g'")
(defpoll currentBrightness :interval "100ms" "brightnessctl | rg Cur | awk '{print $4}' | tr -d '()%'")

(defwidget cal []
	   (box :class "calendarWidget" ;; name of widget for css
		(box :orientation "h" :halign "center" :spacing "10" :space-evenly "false" :hexpand "true" :vexpand "true"
		     (label :class "calendarIcon" :halign "center" :text '')

		     (box :orientation "h" :halign "center" :spacing "5" :space-evenly "false" :hexpand "true" :vexpand "true"
			  (label :class "calendarDay" :halign "center" :text day)
			  (label :class "calendarMonth" :halign "center" :text month)
			  (label :class "calendarDate" :halign "center" :text date))
		     )))


(defwidget volSlider [label value ?onchange ?onclick]
           (box :orientation "h"
                :class "volSlider"
                :space-evenly true
                (box :class "volSliderLabel"
                     (button :onclick onclick
                             :class "volSliderIcon"
                             :halign "center"
                             label
			     )
                     (scale :min 0
                            :max 101
                            :active {onchange != ""}
                            :value value
                            :onchange onchange ))))

(defwidget volumeSlider []
	   (volSlider :label "󰕾"
		      :class "volSlider"
		      :value currentVolume
		      :onchange "wpctl set-volume @DEFAULT_SINK@ {}%"
		      :onclick "wpctl set-mute @DEFAULT_SINK@ toggle"))


(defwidget briSlider [label value ?onchange ?onclick]
           (box :orientation "h"
                :class "briSlider"
                :space-evenly true
                (box :class "briSliderLabel"
                     (button :onclick onclick
                             :class "briSliderIcon"
                             :halign "center"
                             label
			     )
                     (scale :min 0
                            :max 101
                            :active {onchange != ""}
                            :value value
                            :onchange onchange ))))

(defwidget brightSlider []
	   (briSlider :label "󰃠"
		      :class "briSlider"
		      :value currentBrightness
		      :onchange "light -S {}"
		      :onclick ""))





;; (defwidget ram []
;;   (icon-module :class "ram" :icon "" :visible {EWW_RAM.used_mem_perc != ""}
;;     (label :text "${round(EWW_RAM.used_mem_perc, 0)}%")))
;;
;; (defwidget cpu []
;;   (icon-module :class "cpu" :icon ""
;;     (label :text "${round(EWW_CPU.avg, 0)}%")))
;;
;; (defwidget time []
;;   (icon-module :class "time" :icon ""
;;     (label :text time_poll)))

;; (defwidget speaker []
;;   (icon-module :class "speaker"
;;                :icon {speaker_poll.icon}
;;     (eventbox :onscroll `eww update speaker_poll="$(./scripts/speaker.sh {})"`
;;       (button :onclick `eww update speaker_poll="$(./scripts/speaker.sh toggle)"`
;;         (label :text {speaker_poll.content})))))
;;
;; (defwidget output-volume-slider []
;;            (metric :label output-volume-icon
;;                    :value output-volume
;;                    :onchange "scripts/set_output_volume {}%"
;;                    :onclick "scripts/toggle_output_mute"
;;            )
;; )
;;

(defwindow sys1
	   :stacking "bg"
	   :focusable "false"
	   :monitor 0
	   :geometry (geometry
		      :x 1415
		      :y 608
		      :width 350
		      :height 225)
	   (system1))

;; (defwindow vol
;; 	:stacking "bg"
;; 	:focusable "false"
;; 	:monitor 0
;; 	:geometry (geometry
;; 			   :x 456
;; 			   :y 308
;; 			   :height 325)
;; 	(volum))

(defwindow sys2
	   :stacking "bg"
	   :focusable "false"
	   :monitor 0
	   :geometry (geometry
		      :x 165
		      :y 608
		      :width 350
		      :height 225)
	   (system2))

(defwindow vol
	   :stacking "fg"
	   :focusable "false"
	   :monitor 0
	   :geometry (geometry
		      :x 1520 ;; 1375
		      :y -20
		      :width 350
		      :height 15)
	   (volumeSlider))

(defwindow bri
	   :stacking "fg"
	   :focusable "false"
	   :monitor 0
	   :geometry (geometry
		      :x 1190 ;; 1070
		      :y -20
		      :width 350
		      :height 15)
	   (brightSlider))
